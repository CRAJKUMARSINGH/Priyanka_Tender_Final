import streamlit as st
import pandas as pd
import json
import os
from datetime import datetime
import tempfile
import logging

# Import our enhanced custom modules
from theme import apply_custom_css, get_theme_colors, get_gradient_styles
from ui_components import (
    create_header, create_footer, show_balloons, create_info_card,
    create_metric_card, create_status_indicator, create_progress_card,
    create_feature_grid, create_system_status, show_celebration_message
)
from tender_processor import TenderProcessor
from excel_parser import ExcelParser
from bidder_manager import BidderManager
from report_generator import ReportGenerator
from document_generator import DocumentGenerator
from comparative_statement_generator import ComparativeStatementGenerator
from letter_acceptance_generator import LetterAcceptanceGenerator
from work_order_generator import WorkOrderGenerator
from scrutiny_sheet_generator import ScrutinySheetGenerator
from date_utils import DateUtils
from pdf_generator import PDFGenerator
from latex_pdf_generator import LatexPDFGenerator
from zip_generator import ZipGenerator

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('app.log'),
        logging.StreamHandler()
    ]
)

# Configure logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Page configuration with enhanced metadata
st.set_page_config(
    page_title="Enhanced Tender Processing System",
    page_icon="üèóÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded",
    menu_items={
        'Get Help': 'https://docs.streamlit.io/',
        'Report a bug': None,
        'About': "Enhanced Tender Processing System v2.0 - Professional UI Migration Complete"
    }
)

# Apply enhanced custom styling
apply_custom_css()

def initialize_session_state():
    if 'works' not in st.session_state:
        st.session_state.works = []
    if 'current_work' not in st.session_state:
        st.session_state.current_work = None
    if 'valid_bidders' not in st.session_state:
        st.session_state.valid_bidders = {}
    if 'bidder_inputs' not in st.session_state:
        st.session_state.bidder_inputs = {}
    if 'latex_gen' not in st.session_state:
        st.session_state.latex_gen = LatexPDFGenerator()
    if 'zip_gen' not in st.session_state:
        st.session_state.zip_gen = ZipGenerator()
    if 'tender_processor' not in st.session_state:
        st.session_state.tender_processor = TenderProcessor()
    if 'excel_parser' not in st.session_state:
        st.session_state.excel_parser = ExcelParser()
    if 'bidder_manager' not in st.session_state:
        st.session_state.bidder_manager = BidderManager()

def main():
    """Enhanced main application function with professional UI."""
    # Create enhanced header with branding
    create_header()
    
    # System status indicator
    create_system_status()
    
    # Initialize session state with enhanced tracking
    initialize_session_state()
    
    # Enhanced sidebar navigation with professional styling
    st.sidebar.markdown("### üéØ Enhanced Navigation")
    st.sidebar.markdown("---")

    # Feature showcase in sidebar
    st.sidebar.markdown("""
    <div style="
        background: linear-gradient(135deg, #f8f9fa, #ffffff);
        padding: 15px;
        border-radius: 8px;
        margin: 10px 0;
        border-left: 4px solid #1f77b4;
    ">
        <h4 style="margin: 0; color: #2c3e50;">‚ú® Enhanced Features</h4>
        <ul style="margin: 10px 0; padding-left: 20px; color: #6c757d;">
            <li>Professional UI Design</li>
            <li>Balloon Theme Integration</li>
            <li>Enhanced Branding</li>
            <li>Responsive Layout</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)

    operation = st.sidebar.radio(
        "Select Operation:",
        [
            "üè† Home",
            "üìÑ Upload NIT Document",
            "üë• Manage Bidders", 
            "üìä Generate Reports",
            "üìù Generate Documents"
        ],
        help="Choose your operation from the enhanced menu"
    )
    
    # Route to the appropriate page based on user selection
    if "Home" in operation:
        show_home()
    elif "NIT Upload" in operation:
        handle_nit_upload()
    elif "Manage Bidders" in operation:
        handle_bidder_management()
    elif "Generate Reports" in operation:
        handle_report_generation()
    elif "Generate Documents" in operation:
        handle_document_generation()
    
    # Create professional footer
    create_footer()
    
    # Show celebration message for first-time users
    if 'first_visit' not in st.session_state:
        show_celebration_message("Welcome to the Enhanced Tender Processing System! üéâ")
        st.session_state.first_visit = False

def show_home():
    """Display the home page with an overview of the application."""
    # Get theme colors and gradients
    theme_colors = get_theme_colors()
    gradients = get_gradient_styles()
    
    # Apply theme to the title section
    st.markdown(
        f"""
        <div style="
            background: {gradients['header_gradient']};
            color: white;
            padding: 20px;
            border-radius: 10px;
            margin-bottom: 20px;
        ">
            <h1 style="margin: 0; color: white;">Welcome to Tender Management System</h1>
            <p style="margin: 5px 0 0 0; opacity: 0.9;">Streamline your tender management process with our professional tools</p>
        </div>
        """,
        unsafe_allow_html=True
    )
    
    # System metrics row
    st.subheader("System Overview")
    metric_col1, metric_col2, metric_col3, metric_col4 = st.columns(4)
    
    with metric_col1:
        create_metric_card(
            "Active Tenders",
            "12",
            "+2 from last month",
            "üìã"
        )
    
    with metric_col2:
        create_metric_card(
            "Total Bidders",
            "48",
            "+5 this week",
            "üë•"
        )
    
    with metric_col3:
        create_metric_card(
            "Documents Generated",
            "156",
            "+24 today",
            "üìÑ"
        )
    
    with metric_col4:
        create_metric_card(
            "Success Rate",
            "92%",
            "+3% improvement",
            "üìà"
        )
    
    # Status indicators
    st.markdown("### System Status")
    col1, col2 = st.columns(2)
    
    with col1:
        create_status_indicator("success", "Document Processing: Operational")
        create_status_indicator("warning", "Storage: 78% used")
    
    with col2:
        create_status_indicator("success", "Database: Connected")
        create_status_indicator("error", "Backup: Overdue")
    
    # Progress cards
    st.markdown("### Current Progress")
    progress_col1, progress_col2 = st.columns(2)
    
    with progress_col1:
        create_progress_card(
            "Tender Processing",
            0.75,
            "3 of 4 steps completed"
        )
    
    with progress_col2:
        create_progress_card(
            "Document Generation",
            0.4,
            "2 of 5 steps completed"
        )
    
    # Feature grid
    st.markdown("### Key Features")
    create_feature_grid()
    
    # Recent activities with enhanced UI
    st.markdown("### Recent Activities")
    with st.expander("View Activity Log", expanded=True):
        st.info("No recent activities to display. Start by uploading an NIT document or managing bidders.")
    
    # Call to action with theme colors
    st.markdown("---")
    st.markdown("### Ready to get started?")
    
    # Create a container with theme gradient
    st.markdown(
        f"""
        <div style="
            background: {gradients['card_gradient']};
            padding: 20px;
            border-radius: 10px;
            margin: 20px 0;
            color: white;
            text-align: center;
        ">
            <h3 style="margin-top: 0; color: white;">Start Your Tender Journey</h3>
            <p>Click below to begin processing your first tender</p>
        </div>
        """,
        unsafe_allow_html=True
    )
    
    # Center the button
    col1, col2, col3 = st.columns([1,2,1])
    with col2:
        if st.button(
            "üöÄ Launch Tender Processing", 
            use_container_width=True,
            type="primary"
        ):
            st.session_state.current_work = "new_tender"
            show_celebration_message("Let's get started with your tender processing!")
            st.balloons()
            st.experimental_rerun()
    
    # Add theme-based footer note
    st.markdown(
        f"<div style='text-align: center; color: {theme_colors['gray']}; margin-top: 20px;'>"
        f"<small>Theme: Professional Blue | v2.0.0</small>"
        f"</div>",
        unsafe_allow_html=True
    )


def handle_nit_upload():
    """Handle NIT document upload and processing."""
    st.header("üìÑ Upload NIT Document")
    
    create_info_card(
        "NIT Document Upload", 
        "Upload your Notice Inviting Tender (NIT) Excel file to extract work details and estimated costs. "
        "The system supports multiple date formats and will automatically parse the tender information.",
        "üìÑ"
    )
    
    uploaded_file = st.file_uploader(
        "Choose NIT Excel file", 
        type=['xlsx', 'xls'],
        help="Upload the official NIT Excel document"
    )
    
    if uploaded_file is not None:
        try:
            # Save uploaded file temporarily
            with tempfile.NamedTemporaryFile(delete=False, suffix='.xlsx') as tmp_file:
                tmp_file.write(uploaded_file.getvalue())
                tmp_file_path = tmp_file.name
            
            # Parse Excel file
            parser = ExcelParser()
            work_data = parser.parse_nit_excel(tmp_file_path)
            
            # Clean up temporary file
            os.unlink(tmp_file_path)
            
            if work_data:
                # Prepare work_info for consistency
                work_info = {
                    'work_name': work_data.get('work_name', 'Unknown Work'),
                    'nit_number': work_data.get('nit_number', 'Unknown NIT'),
                    'estimated_cost': float(str(work_data.get('estimated_cost', 0)).replace(',', '')),
                    'earnest_money': float(str(work_data.get('earnest_money', 0)).replace(',', '')),
                    'time_completion': work_data.get('time_completion', '6 months'),
                    'nit_date': work_data.get('nit_date', 'Not found'),
                    'receipt_date': work_data.get('receipt_date', 'Not found'),
                    'opening_date': work_data.get('opening_date', 'Not found')
                }
                
                if work_data.get('works') and len(work_data['works']) > 0:
                    first_work = work_data['works'][0]
                    work_info.update({
                        'work_name': first_work.get('name', work_info['work_name']),
                        'item_no': first_work.get('item_no', '1'),
                        'estimated_cost': float(str(first_work.get('estimated_cost', work_info['estimated_cost'])).replace(',', '')),
                        'earnest_money': float(str(first_work.get('earnest_money', work_info['earnest_money'])).replace(',', '')),
                        'time_completion': first_work.get('time_completion', work_info['time_completion'])
                    })
                
                work_data['work_info'] = work_info
                st.session_state.current_work = work_data
                st.success("‚úÖ NIT document uploaded and parsed successfully!")
                
                # Display parsed information
                col1, col2 = st.columns(2)
                
                with col1:
                    st.subheader("üìã NIT Information")
                    st.write(f"**Work Package:** {work_data['work_name']}")
                    st.write(f"**NIT Number:** {work_data['nit_number']}")
                    st.write(f"**Total Works:** {work_data.get('total_works', 1)}")
                    st.write(f"**Total Estimated Cost:** ‚Çπ{work_info['estimated_cost']:,.2f}")
                    st.write(f"**Total Earnest Money:** ‚Çπ{work_info['earnest_money']:,.2f}")
                
                with col2:
                    st.subheader("üìÖ Timeline Information")
                    st.write(f"**NIT Date:** {work_info.get('nit_date', 'Not found')}")
                    st.write(f"**Receipt Date:** {work_info.get('receipt_date', 'Not found')}")
                    st.write(f"**Opening Date:** {work_info.get('opening_date', 'Not found')}")
                    st.write(f"**Max Completion Time:** {work_info.get('time_completion', 6)} months")
                
                if work_data.get('works') and len(work_data['works']) > 1:
                    st.subheader("üìã Individual Works Details")
                    works_df = pd.DataFrame(work_data['works'])
                    works_df['estimated_cost_display'] = works_df['estimated_cost'].apply(lambda x: f"‚Çπ{x:,.0f}")
                    works_df['earnest_money_display'] = works_df['earnest_money'].apply(lambda x: f"‚Çπ{x:,.0f}")
                    display_df = works_df[['item_no', 'name', 'estimated_cost_display', 'time_completion', 'earnest_money_display']]
                    display_df.columns = ['Item No.', 'Work Name', 'Estimated Cost', 'Time (Months)', 'Earnest Money']
                    st.dataframe(display_df, use_container_width=True)
                    st.info(f"üí° This NIT contains {len(work_data['works'])} individual works. Go to 'Manage Bidders' to select a specific work for bidding.")
                elif work_data.get('works') and len(work_data['works']) == 1:
                    st.subheader("üìã Work Details")
                    work = work_data['works'][0]
                    st.write(f"**Work Name:** {work['name']}")
                    st.write(f"**Estimated Cost:** ‚Çπ{work['estimated_cost']:,.2f}")
                    st.write(f"**Time of Completion:** {work['time_completion']} months")
                    st.write(f"**Earnest Money:** ‚Çπ{work['earnest_money']:,.2f}")
                    st.info("üí° Go to 'Manage Bidders' to add bidders for this work.")
                    show_balloons()
                else:
                    st.error("‚ùå Failed to parse NIT document. Please check the file format.")
            else:
                st.error("‚ùå Failed to parse NIT document. Please check the file format.")
                
        except Exception as e:
            st.error(f"‚ùå Error processing file: {str(e)}")
            logging.error(f"Error processing NIT file: {e}")

def handle_bidder_management():
    """Enhanced bidder management with professional UI and functionality."""
    st.header("üë• Enhanced Bidder Management")

    if st.session_state.current_work is None:
        create_status_indicator("warning", "Please upload a NIT document first to enable bidder management.")
        return

    # Enhanced bidder management interface
    create_info_card(
        "Professional Bidder Database",
        "Manage your bidder database with enhanced selection tools, real-time calculations, "
        "and professional data presentation. Experience improved workflow with the new UI.",
        "üë•"
    )
    
    # Load bidder database
    bidder_database = {}
    try:
        with open('bidder_database.json', 'r', encoding='utf-8') as f:
            bidder_database = json.load(f)
    except Exception as e:
        st.warning(f"‚ö†Ô∏è Could not load bidder database: {str(e)}. Creating new database.")
        bidder_database = {}

    available_bidders = list(bidder_database.keys())
    
    # Enhanced bidder statistics
    col1, col2, col3 = st.columns(3)
    
    with col1:
        create_metric_card(
            "Available Bidders",
            str(len(available_bidders)),
            "In database",
            "üë•"
        )

    with col2:
        create_metric_card(
            "Selected Bidders", 
            str(len(st.session_state.get('bidders', []))),
            "Currently active",
            "‚úÖ"
        )

    with col3:
        create_metric_card(
            "Processing Status",
            "Enhanced",
            "UI version 2.0",
            "üöÄ"
        )

    # Enhanced bidder selection interface
    st.markdown("### üéØ Enhanced Bidder Selection")
    
    num_bidders = st.slider(
        "Select number of participating bidders:",
        min_value=1,
        max_value=10,
        value=3,
        help="Choose how many bidders participated in this tender"
    )

    # Enhanced bidder input interface
    if num_bidders:
        st.markdown("### üìù Bidder Details Entry")
        bidder_data_list = []
        all_valid = True

        for i in range(num_bidders):
            with st.expander(f"üè¢ Bidder {i+1} Details", expanded=True):
                col1, col2 = st.columns([2, 1])

                with col1:
                    selected_bidder = st.selectbox(
                        f"Select Bidder {i+1}:",
                        options=[""] + available_bidders,
                        key=f"enhanced_bidder_select_{i}",
                        help="Choose from the enhanced bidder database"
                    )

                    # Show bidder information if selected from database
                    if selected_bidder and selected_bidder in bidder_database:
                        st.info(f"üìç **Address:** {bidder_database[selected_bidder].get('address', 'N/A')}")
                        st.success(f"üóìÔ∏è **Last Used:** {bidder_database[selected_bidder].get('last_used', 'Never')}")

                with col2:
                    percentage_str = st.text_input(
                        f"Percentage (%):",
                        placeholder="e.g., -5.50",
                        key=f"enhanced_percentage_{i}",
                        help="Enter % above (+) or below (-) estimate"
                    )

                # Enhanced validation and calculation
                if selected_bidder and percentage_str:
                    try:
                        percentage = float(percentage_str)
                        if -99.99 <= percentage <= 99.99:
                            estimated_cost = st.session_state.current_work.get('estimated_cost', 
                                                                           st.session_state.current_work.get('work_info', {})
                                                                           .get('estimated_cost', 0))
                            bid_amount = estimated_cost * (1 + percentage / 100)

                            # Enhanced bid amount display
                            st.markdown(f"""
                            <div style="
                                background: linear-gradient(135deg, #d4edda, #c3e6cb);
                                padding: 15px;
                                border-radius: 8px;
                                border-left: 4px solid #28a745;
                                margin: 10px 0;
                            ">
                                <h4 style="margin: 0; color: #155724;">üí∞ Calculated Bid Amount</h4>
                                <p style="margin: 5px 0; font-size: 1.2rem; font-weight: bold; color: #155724;">
                                    ‚Çπ{bid_amount:,.2f}
                                </p>
                                <p style="margin: 0; color: #155724; font-size: 0.9rem;">
                                    ({percentage:+.2f}% from estimate)
                                </p>
                            </div>
                            """, unsafe_allow_html=True)

                            bidder_data = {
                                'name': selected_bidder,
                                'address': bidder_database[selected_bidder].get('address', ''),
                                'percentage': percentage,
                                'bid_amount': bid_amount,
                                'earnest_money': st.session_state.current_work.get('earnest_money', 
                                                                               st.session_state.current_work.get('work_info', {})
                                                                               .get('earnest_money', 0)),
                                'date_added': DateUtils().get_current_date()
                            }
                            bidder_data_list.append(bidder_data)
                        else:
                            create_status_indicator("error", "Percentage must be between -99.99% and +99.99%")
                            all_valid = False
                    except ValueError:
                        create_status_indicator("error", "Please enter a valid percentage value")
                        all_valid = False
                elif selected_bidder or percentage_str:
                    all_valid = False
        
        # Enhanced action buttons
        st.markdown("### üéØ Actions")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            if st.button("üöÄ Add All Bidders", type="primary", disabled=not all_valid or len(bidder_data_list) != num_bidders):
                st.session_state.bidders = bidder_data_list
                
                # Update bidder database with last used dates and add new bidders
                for bidder_data in bidder_data_list:
                    bidder_name = bidder_data['name']
                    if bidder_name in bidder_database:
                        bidder_database[bidder_name]['last_used'] = DateUtils().get_current_date()
                        bidder_database[bidder_name]['total_tenders'] = bidder_database[bidder_name].get('total_tenders', 0) + 1
                    else:
                        bidder_database[bidder_name] = {
                            'address': bidder_data['address'],
                            'date_added': DateUtils().get_current_date(),
                            'last_used': DateUtils().get_current_date(),
                            'total_tenders': 1
                        }
                
                # Save updated database
                try:
                    with open('bidder_database.json', 'w', encoding='utf-8') as f:
                        json.dump(bidder_database, f, indent=2, ensure_ascii=False)
                    show_celebration_message(f"Successfully added {len(bidder_data_list)} bidders with enhanced processing!")
                    show_balloons()
                    st.rerun()
                except Exception as e:
                    create_status_indicator("error", f"Could not update bidder database: {str(e)}")
        
        with col2:
            if st.button("üîÑ Reset Selection", type="secondary"):
                st.session_state.bidders = []
                if 'bidder_inputs' in st.session_state:
                    del st.session_state.bidder_inputs
                create_status_indicator("info", "Bidder selection reset successfully")
                st.rerun()

        with col3:
            if st.button("üé® Show UI Features", type="secondary"):
                show_celebration_message("Enhanced UI features showcased!")

        # Enhanced bidder display
        if st.session_state.get('bidders'):
            st.markdown("### üìä Current Bidder Summary")

            # Create enhanced DataFrame
            df_data = []
            for i, bidder in enumerate(st.session_state.bidders):
                df_data.append({
                    'Rank': i + 1,
                    'Bidder Name': bidder['name'],
                    'Address': bidder.get('address', 'N/A'),
                    'Percentage': f"{bidder.get('percentage', 0):+.2f}%",
                    'Bid Amount': f"‚Çπ{bidder.get('bid_amount', 0):,.2f}",
                    'Status': '‚úÖ Active'
                })

            df = pd.DataFrame(df_data)
            st.dataframe(df, use_container_width=True)

            # Enhanced L1 bidder display
            sorted_bidders = sorted(st.session_state.bidders, key=lambda x: x.get('bid_amount', float('inf')))
            if sorted_bidders:
                l1_bidder = sorted_bidders[0]
                
                st.markdown(f"""
                <div style="
                    background: linear-gradient(135deg, #d4edda, #c3e6cb);
                    padding: 20px;
                    border-radius: 12px;
                    border-left: 4px solid #28a745;
                    margin: 20px 0;
                    text-align: center;
                ">
                    <h3 style="margin: 0; color: #155724;">ü•á L1 (Lowest) Bidder</h3>
                    <h4 style="margin: 10px 0; color: #155724;">{l1_bidder.get('name', 'N/A')}</h4>
                    <p style="margin: 5px 0; font-size: 1.2rem; font-weight: bold; color: #155724;">
                        ‚Çπ{l1_bidder.get('bid_amount', 0):,.2f} ({l1_bidder.get('percentage', 0):+.2f}%)
                    </p>
                    <p style="margin: 0; color: #155724;">Enhanced calculation with professional accuracy</p>
                </div>
                """, unsafe_allow_html=True)
                
                # Clear all bidders option
                if st.button("üóëÔ∏è Clear All Bidders", type="secondary"):
                    st.session_state.bidders = []
                    st.success("‚úÖ Cleared all bidders")
                    st.rerun()
            st.rerun()

def handle_report_generation():
    """Handle report generation with simultaneous generation and download."""
    """Handle report generation with LaTeX-based PDF generation."""
    st.header("üìä Generate Reports")
    
    if not st.session_state.current_work or not st.session_state.bidders:
        st.warning("‚ö†Ô∏è Please upload NIT document and add bidders first.")
        return
    
    # Bulk Generation Section
    work_data = st.session_state.current_work
    work_info = {
        'work_name': work_data.get('work_name', 'Unknown Work'),
        'nit_number': work_data.get('nit_number', 'Unknown NIT'),
        'estimated_cost': float(str(work_data.get('estimated_cost', 0)).replace(',', '')),
        'earnest_money': float(str(work_data.get('earnest_money', 0)).replace(',', '')),
        'time_completion': work_data.get('time_completion', '6 months'),
        'nit_date': work_data.get('nit_date', 'Not found'),
        'receipt_date': work_data.get('receipt_date', 'Not found'),
        'opening_date': work_data.get('opening_date', 'Not found')
    }
    if work_data.get('works') and len(work_data['works']) > 0:
        first_work = work_data['works'][0]
        work_info.update({
            'work_name': first_work.get('name', work_info['work_name']),
            'item_no': first_work.get('item_no', '1'),
            'estimated_cost': float(str(first_work.get('estimated_cost', work_info['estimated_cost'])).replace(',', '')),
            'earnest_money': float(str(first_work.get('earnest_money', work_info['earnest_money'])).replace(',', '')),
            'time_completion': first_work.get('time_completion', work_info['time_completion'])
        })
    st.session_state.current_work['work_info'] = work_info
    formatted_work_data = {
        **work_data,
        'work_info': work_info
    }
    logging.info(f"Formatted work data in handle_report_generation: {formatted_work_data}")

    st.subheader("üöÄ Generate All Reports Simultaneously")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üì¶ Generate All Reports", type="primary", help="Generate all reports at once"):
            try:
                progress_bar = st.progress(0)
                status_text = st.empty()
                
                # Initialize generators
                pdf_gen = PDFGenerator()
                doc_gen = DocumentGenerator()
                
                generated_files = {}
                
                # Generate Comparative Statement (PDF)
                status_text.text("Generating Comparative Statement PDF...")
                progress_bar.progress(20)
                comp_pdf = pdf_gen.generate_comparative_statement_pdf(
                    st.session_state.current_work,
                    st.session_state.bidders
                )
                generated_files['comparative_statement_pdf'] = {
                    'content': comp_pdf,
                    'filename': f"comparative_statement_{st.session_state.current_work['nit_number']}.pdf",
                    'mime': "application/pdf"
                }
                
                # Generate Comparative Statement (DOC)
                status_text.text("Generating Comparative Statement DOC...")
                progress_bar.progress(40)
                comp_doc = doc_gen.generate_comparative_statement_doc(
                    st.session_state.current_work,
                    st.session_state.bidders
                )
                generated_files['comparative_statement_doc'] = {
                    'content': comp_doc,
                    'filename': f"comparative_statement_{st.session_state.current_work['nit_number']}.docx",
                    'mime': "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                }
                
                # Generate Scrutiny Sheet (PDF)
                status_text.text("Generating Scrutiny Sheet PDF...")
                progress_bar.progress(60)
                scrutiny_pdf = pdf_gen.generate_scrutiny_sheet_pdf(
                    st.session_state.current_work,
                    st.session_state.bidders
                )
                generated_files['scrutiny_sheet_pdf'] = {
                    'content': scrutiny_pdf,
                    'filename': f"scrutiny_sheet_{st.session_state.current_work['nit_number']}.pdf",
                    'mime': "application/pdf"
                }
                
                # Generate Scrutiny Sheet (DOC)
                status_text.text("Generating Scrutiny Sheet DOC...")
                progress_bar.progress(80)
                scrutiny_doc = doc_gen.generate_scrutiny_sheet_doc(
                    st.session_state.current_work,
                    st.session_state.bidders
                )
                generated_files['scrutiny_sheet_doc'] = {
                    'content': scrutiny_doc,
                    'filename': f"scrutiny_sheet_{st.session_state.current_work['nit_number']}.docx",
                    'mime': "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                }
                
                progress_bar.progress(100)
                status_text.text("All reports generated successfully!")
                
                st.success("‚úÖ All reports generated simultaneously in PDF and DOC formats!")
                
                # Store in session state for download
                st.session_state.generated_reports = generated_files
                
                # Display download section
                st.subheader("üì• Download Generated Reports")
                
                col_a, col_b = st.columns(2)
                
                with col_a:
                    st.markdown("**Comparative Statement**")
                    st.download_button(
                        label="üìã Download PDF",
                        data=generated_files['comparative_statement_pdf']['content'],
                        file_name=generated_files['comparative_statement_pdf']['filename'],
                        mime="application/pdf",
                        key="download_comp_pdf"
                    )
                    st.download_button(
                        label="üìã Download DOC",
                        data=generated_files['comparative_statement_doc']['content'],
                        file_name=generated_files['comparative_statement_doc']['filename'],
                        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                        key="download_comp_doc"
                    )
                
                with col_b:
                    st.markdown("**Scrutiny Sheet**")
                    st.download_button(
                        label="üîç Download PDF",
                        data=generated_files['scrutiny_sheet_pdf']['content'],
                        file_name=generated_files['scrutiny_sheet_pdf']['filename'],
                        mime="application/pdf",
                        key="download_scrutiny_pdf"
                    )
                    st.download_button(
                        label="üîç Download DOC",
                        data=generated_files['scrutiny_sheet_doc']['content'],
                        file_name=generated_files['scrutiny_sheet_doc']['filename'],
                        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                        key="download_scrutiny_doc"
                    )
                
            except Exception as e:
                st.error(f"‚ùå Error in bulk report generation: {str(e)}")
                logging.error(f"Error in bulk report generation: {e}")
    
    with col2:
        if st.button("üìÑ Generate All Documents", type="primary", help="Generate all official documents at once"):
            try:
                progress_bar2 = st.progress(0)
                status_text2 = st.empty()
                
                # Initialize generators
                pdf_gen = PDFGenerator()
                doc_gen = DocumentGenerator()
                
                generated_docs = {}
                
                # Generate Letter of Acceptance (PDF)
                status_text2.text("Generating Letter of Acceptance PDF...")
                progress_bar2.progress(25)
                loa_pdf = pdf_gen.generate_letter_of_acceptance_pdf(
                    st.session_state.current_work,
                    st.session_state.bidders
                )
                generated_docs['letter_of_acceptance_pdf'] = {
                    'content': loa_pdf,
                    'filename': f"letter_of_acceptance_{st.session_state.current_work['nit_number']}.pdf",
                    'mime': "application/pdf"
                }
                
                # Generate Letter of Acceptance (DOC)
                status_text2.text("Generating Letter of Acceptance DOC...")
                progress_bar2.progress(50)
                loa_doc = doc_gen.generate_letter_of_acceptance_doc(
                    st.session_state.current_work,
                    st.session_state.bidders
                )
                generated_docs['letter_of_acceptance_doc'] = {
                    'content': loa_doc,
                    'filename': f"letter_of_acceptance_{st.session_state.current_work['nit_number']}.docx",
                    'mime': "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                }
                
                # Generate Work Order (PDF)
                status_text2.text("Generating Work Order PDF...")
                progress_bar2.progress(75)
                wo_pdf = pdf_gen.generate_work_order_pdf(
                    st.session_state.current_work,
                    st.session_state.bidders
                )
                generated_docs['work_order_pdf'] = {
                    'content': wo_pdf,
                    'filename': f"work_order_{st.session_state.current_work['nit_number']}.pdf",
                    'mime': "application/pdf"
                }
                
                # Generate Work Order (DOC)
                status_text2.text("Generating Work Order DOC...")
                progress_bar2.progress(100)
                wo_doc = doc_gen.generate_work_order_doc(
                    st.session_state.current_work,
                    st.session_state.bidders
                )
                generated_docs['work_order_doc'] = {
                    'content': wo_doc,
                    'filename': f"work_order_{st.session_state.current_work['nit_number']}.docx",
                    'mime': "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
                }
                
                status_text2.text("All documents generated successfully!")
                
                st.success("‚úÖ All documents generated simultaneously in PDF and DOC formats!")
                
                # Store in session state
                st.session_state.generated_documents = generated_docs
                
                # Display download section
                st.subheader("üì• Download Generated Documents")
                
                col_x, col_y = st.columns(2)
                
                with col_x:
                    st.markdown("**Letter of Acceptance**")
                    st.download_button(
                        label="üìÑ Download PDF",
                        data=generated_docs['letter_of_acceptance_pdf']['content'],
                        file_name=generated_docs['letter_of_acceptance_pdf']['filename'],
                        mime="application/pdf",
                        key="download_loa_pdf"
                    )
                    st.download_button(
                        label="üìÑ Download DOC",
                        data=generated_docs['letter_of_acceptance_doc']['content'],
                        file_name=generated_docs['letter_of_acceptance_doc']['filename'],
                        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                        key="download_loa_doc"
                    )
                
                with col_y:
                    st.markdown("**Work Order**")
                    st.download_button(
                        label="üìã Download PDF",
                        data=generated_docs['work_order_pdf']['content'],
                        file_name=generated_docs['work_order_pdf']['filename'],
                        mime="application/pdf",
                        key="download_wo_pdf"
                    )
                    st.download_button(
                        label="üìã Download DOC",
                        data=generated_docs['work_order_doc']['content'],
                        file_name=generated_docs['work_order_doc']['filename'],
                        mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document",
                        key="download_wo_doc"
                    )
                
            except Exception as e:
                st.error(f"‚ùå Error in bulk document generation: {str(e)}")
                logging.error(f"Error in bulk document generation: {e}")
    
    # Divider
    st.markdown("---")
    
    # Individual Generation Section (keep for specific needs)
    st.subheader("üéØ Generate Individual Reports")
    
    col3, col4 = st.columns(2)
    
    with col3:
        if st.button("üìã Generate Comparative Statement", type="secondary"):
            try:
                comp_gen = ComparativeStatementGenerator()
                html_content = comp_gen.generate_comparative_statement(
                    st.session_state.current_work,
                    st.session_state.bidders
                )
                
                st.success("‚úÖ Comparative statement generated!")
                
                st.download_button(
                    label="üì• Download Comparative Statement",
                    data=html_content,
                    file_name=f"comparative_statement_{st.session_state.current_work['nit_number']}.html",
                    mime="text/html",
                    key="single_comp"
                )
                
            except Exception as e:
                st.error(f"‚ùå Error generating comparative statement: {str(e)}")
                logging.error(f"Error generating comparative statement: {e}")
    
    with col4:
        if st.button("üìä Generate Detailed Report", type="secondary"):
            try:
                report_generator = ReportGenerator()
                html_content = report_generator.generate_detailed_report(
                    st.session_state.current_work,
                    st.session_state.bidders
                )
                
                st.success("‚úÖ Detailed report generated!")
                
                st.download_button(
                    label="üì• Download Detailed Report",
                    data=html_content,
                    file_name=f"detailed_report_{st.session_state.current_work['nit_number']}.html",
                    mime="text/html",
                    key="single_detailed"
                )
                
            except Exception as e:
                st.error(f"‚ùå Error generating detailed report: {str(e)}")
                logging.error(f"Error generating detailed report: {e}")

def handle_document_generation():
    """Handle official document generation with individual options."""
    st.header("üìù Generate Individual Documents")
    
    if not st.session_state.current_work or not st.session_state.bidders:
        st.warning("‚ö†Ô∏è Please upload NIT document and add bidders first.")
        return
    
    st.info("üí° Tip: Use 'Generate Reports' section for bulk generation of all documents simultaneously!")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìÑ Generate Letter of Acceptance", type="secondary"):
            try:
                loa_gen = LetterAcceptanceGenerator()
                html_content = loa_gen.generate_letter_of_acceptance(
                    st.session_state.current_work,
                    st.session_state.bidders
                )
                
                st.success("‚úÖ Letter of Acceptance generated!")
                
                st.download_button(
                    label="üì• Download Letter of Acceptance",
                    data=html_content,
                    file_name=f"letter_of_acceptance_{st.session_state.current_work['nit_number']}.html",
                    mime="text/html",
                    key="individual_loa"
                )
                
            except Exception as e:
                st.error(f"‚ùå Error generating Letter of Acceptance: {str(e)}")
                logging.error(f"Error generating LOA: {e}")
    
    with col2:
        if st.button("üìã Generate Work Order", type="secondary"):
            try:
                wo_gen = WorkOrderGenerator()
                html_content = wo_gen.generate_work_order(
                    st.session_state.current_work,
                    st.session_state.bidders
                )
                
                st.success("‚úÖ Work Order generated!")
                
                st.download_button(
                    label="üì• Download Work Order",
                    data=html_content,
                    file_name=f"work_order_{st.session_state.current_work['nit_number']}.html",
                    mime="text/html",
                    key="individual_wo"
                )
                
            except Exception as e:
                st.error(f"‚ùå Error generating Work Order: {str(e)}")
                logging.error(f"Error generating work order: {e}")
    
    with col3:
        if st.button("üîç Generate Scrutiny Sheet", type="secondary"):
            try:
                ss_gen = ScrutinySheetGenerator()
                html_content = ss_gen.generate_scrutiny_sheet(
                    st.session_state.current_work,
                    st.session_state.bidders
                )
                
                st.success("‚úÖ Scrutiny Sheet generated!")
                
                st.download_button(
                    label="üì• Download Scrutiny Sheet",
                    data=html_content,
                    file_name=f"scrutiny_sheet_{st.session_state.current_work['nit_number']}.html",
                    mime="text/html",
                    key="individual_scrutiny"
                )
                
                st.markdown("---")
                st.subheader("üì¶ Generate All Documents")
                
                if st.button("üì¶ Generate All PDFs (LaTeX)", type="primary"):
                    try:
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        latex_gen = LatexPDFGenerator()
                        valid_bidders = [b for b in st.session_state.bidders 
                                      if b.get('bid_amount') is not None 
                                      and str(b.get('bid_amount', '')).replace(',', '').replace('.', '').isdigit()]
                        if not valid_bidders:
                            st.error("‚ùå No valid bidders with proper bid amounts found.")
                            return
                            
                        # Ensure formatted_work_data is available
                        if 'formatted_work_data' not in locals():
                            formatted_work_data = st.session_state.current_work
                            
                        generated_pdfs = latex_gen.generate_bulk_pdfs(formatted_work_data, valid_bidders)
                        progress_bar.progress(100)
                        status_text.text("All PDFs generated successfully!")
                        
                        if generated_pdfs:
                            st.success(f"‚úÖ Generated {len(generated_pdfs)} PDF documents!")
                            st.session_state.generated_pdfs = generated_pdfs
                            st.subheader("üì• Download Generated PDFs")
                            for doc_type, pdf_data in generated_pdfs.items():
                                doc_name = doc_type.replace('_', ' ').title()
                                st.download_button(
                                    label=f"üì• Download {doc_name} PDF",
                                    data=pdf_data,
                                    file_name=f"{doc_type}_{st.session_state.current_work['nit_number']}.pdf",
                                    mime="application/pdf",
                                    key=f"pdf_{doc_type}_{st.session_state.current_work['nit_number']}"
                                )
                        else:
                            st.error("‚ùå Failed to generate any PDF documents. Check app.log for details.")
                            
                    except Exception as e:
                        st.error(f"‚ùå Error generating PDFs: {str(e)}")
                        logging.error(f"Error generating PDFs: {e}", exc_info=True)

                # ZIP download button
                if st.button("üöÄ Download All as ZIP", type="primary"):
                    try:
                        with st.spinner("Creating ZIP package..."):
                            zip_gen = ZipGenerator()
                            if st.session_state.get('generated_pdfs'):
                                documents = st.session_state.generated_pdfs
                            else:
                                # Generate PDFs if not already generated
                                formatted_work_data = st.session_state.current_work
                                valid_bidders = [b for b in st.session_state.bidders 
                                              if b.get('bid_amount') is not None 
                                              and str(b.get('bid_amount', '')).replace(',', '').replace('.', '').isdigit()]
                                documents = latex_gen.generate_bulk_pdfs(formatted_work_data, valid_bidders)
                            
                            if documents:
                                zip_data = zip_gen.create_tender_documents_zip(
                                    st.session_state.current_work['work_name'],
                                    st.session_state.current_work['nit_number'],
                                    documents
                                )
                                if zip_data:
                                    nit_number = st.session_state.current_work['nit_number'].replace('/', '_')
                                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                                    st.download_button(
                                        label="üì¶ Download Complete Package (ZIP)",
                                        data=zip_data,
                                        file_name=f"Tender_Documents_{nit_number}_{timestamp}.zip",
                                        mime="application/zip",
                                        type="primary"
                                    )
                                    st.success(f"‚úÖ ZIP package created with {len(documents)} documents!")
                                    show_balloons()
                                else:
                                    st.error("‚ùå Failed to create ZIP package.")
                            else:
                                st.error("‚ùå No documents available to package.")
                    except Exception as e:
                        st.error(f"‚ùå Error creating ZIP package: {str(e)}")
                        logging.error(f"Error creating ZIP: {e}")

            except Exception as e:
                st.error(f"‚ùå Error generating Scrutiny Sheet: {str(e)}")
                logging.error(f"Error generating scrutiny sheet: {e}")

def handle_document_generation_latex():
    """Enhanced document generation with integrated LaTeX templates."""
    st.header("üìù Enhanced Document Generation with LaTeX Templates")
    
    if not st.session_state.current_work or not st.session_state.bidders:
        create_status_indicator("warning", "Please upload NIT document and add bidders first to enable document generation.")
        return
    
    # Initialize LaTeX generator and required variables
    if 'latex_generator' not in st.session_state:
        st.session_state.latex_generator = LatexPDFGenerator()
    
    # Get work data and bidders
    work_data = st.session_state.current_work
    work_id = work_data.get('work_info', {}).get('item_no', '1')
    valid_bidders = st.session_state.get('bidders', [])
    
    # Initialize LaTeX generator if not already done
    if 'latex_gen' not in st.session_state:
        st.session_state.latex_gen = LatexPDFGenerator()
    
    create_info_card(
        "Professional LaTeX Document Suite",
        "Generate official tender documents using integrated LaTeX templates with professional formatting, "
        "automated data substitution, and PDF compilation. Experience government-standard document quality.",
        "üìù"
    )
    
    # Enhanced document generation interface
    st.markdown("### üéØ Generate Official Documents")
    
    # Document type selection with descriptions
    doc_types = {
        "üìã Comparative Statement": {
            "template": "comparative_statement",
            "description": "Professional bidder comparison with landscape format and tabular layout",
            "features": ["Bidder ranking table", "Cost analysis", "Professional formatting"]
        },
        "üìú Letter of Acceptance": {
            "template": "letter_of_acceptance", 
            "description": "Official acceptance letter with government letterhead format",
            "features": ["Official letterhead", "Legal formatting", "Automated data insertion"]
        },
        "üîç Scrutiny Sheet": {
            "template": "scrutiny_sheet",
            "description": "Detailed tender scrutiny documentation with structured format",
            "features": ["Compliance checklist", "Financial details", "Professional layout"]
        },
        "üìã Work Order": {
            "template": "work_order",
            "description": "Comprehensive work commencement order with timeline details",
            "features": ["Timeline management", "Legal compliance", "Official signatures"]
        }
    }
    
    # Document selection interface
    col1, col2 = st.columns([2, 1])
    
    with col1:
        selected_docs = st.multiselect(
            "Select documents to generate:",
            options=list(doc_types.keys()),
            default=list(doc_types.keys()),
            help="Choose which LaTeX documents to generate"
        )
    
    with col2:
        output_format = st.radio(
            "Output Format:",
            ["Both LaTeX & PDF", "LaTeX Only", "PDF Only"],
            help="Choose output format preference"
        )
    
    # Generation buttons
    st.markdown("### üöÄ Document Generation")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üöÄ Generate Selected Documents", type="primary", disabled=not selected_docs):
            progress_container = st.container()
            results_container = st.container()
            
            with progress_container:
                create_progress_card("LaTeX Document Generation", 0, "Initializing LaTeX generator...")
            
            try:
                generated_results = {}
                total_docs = len(selected_docs)
                
                for i, doc_display in enumerate(selected_docs):
                    doc_template = doc_types[doc_display]["template"]
                    progress = ((i + 1) / total_docs) * 100
                    
                    progress_container.empty()
                    with progress_container:
                        create_progress_card("LaTeX Document Generation", progress, f"Generating {doc_display}...")
                    
                    try:
                        # Generate document using the appropriate method based on template
                        if doc_template == "comparative_statement":
                            # Use the existing method for comparative statement
                            pdf_bytes = st.session_state.latex_gen.generate_comparative_statement_pdf(
                                st.session_state.current_work,
                                st.session_state.bidders
                            )
                            # Save to a temporary file for download
                            import tempfile
                            import os
                            with tempfile.NamedTemporaryFile(delete=False, suffix='.pdf') as tmp_file:
                                tmp_file.write(pdf_bytes)
                                pdf_path = tmp_file.name
                            
                            generated_results[doc_display] = {
                                'template': doc_template,
                                'pdf_path': pdf_path,
                                'status': 'success'
                            }
                        else:
                            # For other document types, use the template-based generation
                            tex_path, tex_content = st.session_state.latex_generator.generate_document(
                                doc_template,
                                st.session_state.current_work,
                                st.session_state.bidders
                            )
                            
                            pdf_path = None
                            if output_format in ["Both LaTeX & PDF", "PDF Only"]:
                                pdf_path = st.session_state.latex_generator.compile_to_pdf(tex_path)
                            
                            generated_results[doc_display] = {
                                'template': doc_template,
                                'tex_path': tex_path,
                                'pdf_path': pdf_path,
                                'tex_content': tex_content,
                                'status': 'success'
                            }
                            
                    except Exception as e:
                        generated_results[doc_display] = {
                            'template': doc_template,
                            'status': 'error',
                            'error': str(e)
                        }
                
                progress_container.empty()
                with progress_container:
                    create_progress_card("LaTeX Document Generation", 100, "All documents generated successfully!")
                
                # Store results in session state for download
                st.session_state.generated_documents = generated_results
                
                show_celebration_message(f"Successfully generated {len([r for r in generated_results.values() if r['status'] == 'success'])} professional documents!")
                show_balloons()
                
                # Display generation results
                with results_container:
                    st.markdown("### üì• Generated Documents")
                    
                    success_count = sum(1 for result in generated_results.values() if result.get('status') == 'success')
                    error_count = len(generated_results) - success_count
                    
                    col_stat1, col_stat2, col_stat3 = st.columns(3)
                    
                    with col_stat1:
                        create_metric_card("Generated", str(success_count), "Documents created", "‚úÖ")
                    
                    with col_stat2:
                        create_metric_card("Errors", str(error_count), "Generation issues", "‚ùå")
                    
                    with col_stat3:
                        create_metric_card("Format", output_format, "Output type", "üìÑ")
                    
                    # Document download interface
                    for doc_name, result in generated_results.items():
                        if result.get('status') == 'success':
                            with st.expander(f"üìÑ {doc_name} - Ready for Download"):
                                col_dl1, col_dl2 = st.columns(2)
                                
                                # PDF Download
                                if result.get('pdf_path') and output_format in ["Both LaTeX & PDF", "PDF Only"]:
                                    with col_dl1:  # Fixed typo in column name (was col_dL1)
                                        try:
                                            with open(result['pdf_path'], 'rb') as f:
                                                pdf_content = f.read()
                                            
                                            st.download_button(
                                                label="üìä Download PDF",
                                                data=pdf_content,
                                                file_name=f"{result['template']}.pdf",
                                                mime="application/pdf",
                                                help="Download compiled PDF document"
                                            )
                                        except Exception as e:
                                            st.error(f"Error reading PDF file: {e}")
                                
                                # LaTeX Source Download
                                if result.get('tex_path') and output_format in ["Both LaTeX & PDF", "LaTeX Only"]:
                                    with col_dl2:
                                        try:
                                            with open(result['tex_path'], 'r', encoding='utf-8') as f:
                                                tex_content = f.read()
                                            
                                            st.download_button(
                                                label="üìÑ Download LaTeX",
                                                data=tex_content,
                                                file_name=f"{result['template']}.tex",
                                                mime="text/plain",
                                                help="Download LaTeX source file"
                                            )
                                        except Exception as e:
                                            st.error(f"Error reading LaTeX file: {e}")
                                
                                # Preview LaTeX content
                                if st.checkbox(f"Preview LaTeX Source - {doc_name}", key=f"preview_{result['template']}"):
                                    st.code(result.get('tex_content', 'Content not available'), language='latex')
                        else:
                            error_msg = f"Failed to generate {doc_name}: {result.get('error', 'Unknown error')}"
                            create_status_indicator("error", error_msg)
                
            except Exception as e:
                progress_container.empty()
                error_msg = f"Document generation failed: {str(e)}"
                create_status_indicator("error", error_msg)
                logging.error(f"Document generation error: {e}")
    
    with col2:
        if st.button("üìã Preview Templates", type="secondary"):
            st.markdown("### üìñ LaTeX Template Preview")
            
            template_files = [
                "comparative_statement.tex",
                "letter_of_acceptance.tex", 
                "scrutiny_sheet.tex",
                "work_order.tex"
            ]
            
            selected_template = st.selectbox(
                "Select template to preview:",
                template_files,
                help="Choose a LaTeX template to preview"
            )
            
            try:
                template_path = os.path.join("latex_templates", selected_template)
                if os.path.exists(template_path):
                    with open(template_path, 'r', encoding='utf-8') as f:
                        template_content = f.read()
                    st.code(template_content, language='latex')
                else:
                    st.warning(f"Template file not found: {template_path}")
            except Exception as e:
                create_status_indicator("error", f"Error loading template: {e}")
    
    with col3:
        if st.button("üßπ Cleanup Old Files", type="secondary"):
            try:
                # Implement cleanup logic if available in LatexPDFGenerator
                if hasattr(st.session_state.latex_generator, 'cleanup_old_files'):
                    st.session_state.latex_generator.cleanup_old_files(days_old=7)
                create_status_indicator("success", "Temporary files cleaned up successfully!")
            except Exception as e:
                create_status_indicator("error", f"Cleanup failed: {e}")
    
    # Enhanced template information section
    st.markdown("### üìö LaTeX Template Integration")
    
    integration_info = {
        "Professional Formatting": "LaTeX templates ensure government-standard document formatting with precise layouts",
        "Automated Data Binding": "Dynamic placeholder substitution with work and bidder information",
        "PDF Compilation": "Automatic PDF generation using pdflatex for professional output",
        "Template Customization": "Easily customizable templates for different government departments"
    }
    
    # Create document generation buttons in a separate section
    st.markdown("### üìÑ Generate Individual Documents")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button(f"üìù Generate Letter of Acceptance"):
            try:
                pdf_bytes = latex_gen.generate_letter_acceptance_pdf(work_data, l1_bidder)
                st.download_button(
                    label="üì• Download Letter of Acceptance",
                    data=pdf_bytes,
                    file_name=f"Letter_of_Acceptance_Work_{work_id}.pdf",
                    mime="application/pdf"
                )
            except Exception as e:
                st.error(f"Error generating Letter of Acceptance: {str(e)}")
                logging.error(f"Error in Letter of Acceptance generation: {e}")
    
    with col2:
        if st.button(f"üìã Generate Work Order"):
            try:
                pdf_bytes = latex_gen.generate_work_order_pdf(work_data, l1_bidder)
                st.download_button(
                    label="üì• Download Work Order",
                    data=pdf_bytes,
                    file_name=f"Work_Order_Work_{work_id}.pdf",
                    mime="application/pdf"
                )
            except Exception as e:
                st.error(f"Error generating Work Order: {str(e)}")
                logging.error(f"Error in Work Order generation: {e}")
    
    with col3:
        if st.button(f"üîç Generate Scrutiny Sheet"):
            try:
                pdf_bytes = latex_gen.generate_scrutiny_sheet_pdf(work_data, valid_bidders)
                st.download_button(
                    label="üì• Download Scrutiny Sheet",
                    data=pdf_bytes,
                    file_name=f"Scrutiny_Sheet_Work_{work_id}.pdf",
                    mime="application/pdf"
                )
            except Exception as e:
                st.error(f"Error generating Scrutiny Sheet: {str(e)}")
                logging.error(f"Error in Scrutiny Sheet generation: {e}")
    
    # ZIP generation section
    st.markdown("---")
    st.markdown("### üì¶ Generate Complete Package")
    
    if st.button(f"üöÄ Generate & Download All Documents as ZIP"):
        try:
            with st.spinner("Generating documents and creating ZIP package..."):
                documents = latex_gen.generate_bulk_pdfs(work_data, valid_bidders)
                if documents:
                    zip_buffer = zip_gen.create_zip(documents)
                    st.download_button(
                        label="üì¶ Download Complete Package (ZIP)",
                        data=zip_buffer,
                        file_name=f"{work_data['work_info']['nit_number']}_Work_{work_id}_documents.zip",
                        mime="application/zip"
                    )
                    st.success("‚úÖ All documents generated and packaged successfully!")
                else:
                    st.error("‚ùå Failed to generate documents for the ZIP package.")
        except Exception as e:
            st.error(f"‚ùå Error generating ZIP package: {str(e)}")
            logging.error(f"Error in ZIP package generation: {e}")


def main():
    apply_custom_css()
    initialize_session_state()
    ui = UIComponents()
    
    st.title("Tender Management System")
    st.header("Upload NIT Document")
    ui.render_nit_upload()
    
    if st.session_state.works:
        st.header("Select Work")
        work_options = [(work['work_info']['item_no'], work['work_info']['work_name']) for work in st.session_state.works]
        selected_work_id = st.selectbox("Select Work", options=[f"{item_no}: {work_name}" for item_no, work_name in work_options])
        selected_work_id = selected_work_id.split(":")[0]
        st.session_state.current_work = next((work for work in st.session_state.works if work['work_info']['item_no'] == selected_work_id), None)
        
        st.header(f"Manage Bidders for Work {selected_work_id}")
        ui.render_bidder_management(selected_work_id)
        
        st.header(f"Generate Reports for Work {selected_work_id}")
        ui.render_report_generation()
        
        st.header(f"Generate Documents for Work {selected_work_id}")
        handle_document_generation()

if __name__ == "__main__":
    main()
