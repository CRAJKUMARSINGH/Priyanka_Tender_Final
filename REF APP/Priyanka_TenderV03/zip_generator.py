"""
ZIP Generator for Tender Processing System
Creates ZIP archives containing multiple documents
"""

import zipfile
import io
from typing import Dict
import logging

class ZipGenerator:
    """Generates ZIP archives containing multiple documents."""
    
    def __init__(self):
        pass
    
    def create_zip(self, documents: Dict[str, bytes]) -> bytes:
        """
        Create a ZIP file containing multiple documents.
        
        Args:
            documents: Dictionary with filename as key and file content as bytes value
            
        Returns:
            ZIP file content as bytes
        """
        try:
            zip_buffer = io.BytesIO()
            
            with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                for filename, content in documents.items():
                    zip_file.writestr(filename, content)
            
            zip_data = zip_buffer.getvalue()
            zip_buffer.close()
            
            logging.info(f"Created ZIP archive with {len(documents)} files")
            return zip_data
            
        except Exception as e:
            logging.error(f"Error creating ZIP archive: {e}")
            return b""
    
    def create_tender_documents_zip(self, work_name: str, nit_number: str, 
                                   documents: Dict[str, bytes]) -> bytes:
        """
        Create a ZIP file specifically for tender documents with organized naming.
        
        Args:
            work_name: Name of the work for folder organization
            nit_number: NIT number for file naming
            documents: Dictionary with document type as key and PDF content as value
            
        Returns:
            ZIP file content as bytes
        """
        try:
            zip_buffer = io.BytesIO()
            
            # Document type to filename mapping
            doc_names = {
                'comparative_statement': 'Comparative_Statement',
                'letter_acceptance': 'Letter_of_Acceptance',
                'scrutiny_sheet': 'Scrutiny_Sheet',
                'work_order': 'Work_Order'
            }
            
            with zipfile.ZipFile(zip_buffer, 'w', zipfile.ZIP_DEFLATED) as zip_file:
                # Create a folder structure
                folder_name = f"NIT_{nit_number}_Documents"
                
                for doc_type, content in documents.items():
                    if doc_type in doc_names:
                        filename = f"{folder_name}/{doc_names[doc_type]}_{nit_number}.pdf"
                    else:
                        filename = f"{folder_name}/{doc_type}_{nit_number}.pdf"
                    
                    zip_file.writestr(filename, content)
                
                # Add a readme file with document information
                readme_content = f"""Tender Documents Package
===========================

Work Name: {work_name}
NIT Number: {nit_number}
Generated on: {__import__('datetime').datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

This package contains the following documents:
"""
                
                for doc_type in documents.keys():
                    if doc_type in doc_names:
                        readme_content += f"- {doc_names[doc_type].replace('_', ' ')}\n"
                    else:
                        readme_content += f"- {doc_type.replace('_', ' ').title()}\n"
                
                readme_content += f"""
Generated by Enhanced Tender Processing System
"""
                
                zip_file.writestr(f"{folder_name}/README.txt", readme_content.encode('utf-8'))
            
            zip_data = zip_buffer.getvalue()
            zip_buffer.close()
            
            logging.info(f"Created organized ZIP archive for NIT {nit_number} with {len(documents)} documents")
            return zip_data
            
        except Exception as e:
            logging.error(f"Error creating tender documents ZIP: {e}")
            return b""
